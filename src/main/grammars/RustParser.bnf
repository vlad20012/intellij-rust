{
    parserClass='org.rust.lang.core.parser.RustParser'
    parserUtilClass='org.rust.lang.core.parser.RustParserUtil'

    implements='org.rust.lang.core.psi.ext.RsElement'
    extends='org.rust.lang.core.psi.ext.RsElementImpl'

    elementTypeHolderClass='org.rust.lang.core.psi.RsElementTypes'

    elementTypeClass='org.rust.lang.core.psi.RsElementType'
    tokenTypeClass='org.rust.lang.core.psi.RsTokenType'

    psiClassPrefix='Rs'
    psiImplClassSuffix='Impl'
    psiPackage='org.rust.lang.core.psi'
    psiImplPackage='org.rust.lang.core.psi.impl'

    parserImports=[
      'static org.rust.lang.core.parser.RustParserUtil.PathParsingMode.*'
      'static org.rust.lang.core.parser.RustParserUtil.BinaryMode.*'
    ]

    tokens = [
        LBRACE      =  '{'
        RBRACE      =  '}'
        LBRACK      =  '['
        RBRACK      =  ']'
        LPAREN      =  '('
        RPAREN      =  ')'
        COLON       =  ':'
        COLONCOLON  =  '::'
        SEMICOLON   =  ';'
        COMMA       =  ','
        EQ          =  '='
        EXCLEQ      =  '!='
        EQEQ        =  '=='
        SHA         =  '#'
        EXCL        =  '!'
        PLUSEQ      =  '+='
        PLUS        =  '+'
        MINUSEQ     =  '-='
        MINUS       =  '-'
        OREQ        =  '|='
        ANDAND      =  '&&'
        ANDEQ       =  '&='
        AND         =  '&'
        OR          =  '|'
        LT          =  '<'
        XOREQ       =  '^='
        XOR         =  '^'
        MULEQ       =  '*='
        MUL         =  '*'
        DIVEQ       =  '/='
        DIV         =  '/'
        REMEQ       =  '%='
        REM         =  '%'
        GT          =  '>'
        DOT         =  '.'
        DOTDOT      =  '..'
        DOTDOTDOT   =  '...'
        DOTDOTEQ    =  '..='
        FAT_ARROW   =  '=>'
        ARROW       =  '->'
        Q           =  '?'
        AT          =  '@'
        UNDERSCORE  =  '_'
        DOLLAR      =  '$'

        MACRO_KW  = 'macro'
        CSELF     = 'Self'
        TYPE_KW   = 'type'
        UNION     = 'union_kw'
        DEFAULT   = 'default_kw'
        AUTO      = 'auto_kw'
        DYN       = 'dyn_kw'
        ASYNC     = 'async_kw'
        TRY       = 'try_kw'

        SHEBANG_LINE = 'shebang_line'
        RESERVED_KEYWORD = 'reserved_keyword'
    ]

    elementType("(Fn|Anon|Lambda|Path)Parameter") = ValueParameter
    elementType("(Fn|Lambda|Path|FnType)Parameters") = ValueParameterList

    extends("(.+Expr|StructLiteral)") = Expr
    elementType(".+BinExpr") = BinaryExpr
    elementType(".+BinOp") = BinaryOp

    extends("Pat(Wild|Ref|Tup|Slice|Macro|Struct|TupleStruct|Ident|Range|Box|Const)") = Pat

    generateTokenAccessors=true

    consumeTokenMethod("(.*_recover)|(.*Expr)|BinAssignOp") = "consumeTokenFast"
}

// This is the grammar of the Rust language which is used by Grammar Kit
// to generate the parser and the PSI classes. Rule `FooBar` corresponds
// to `RsFooBar` PSI class.
//
// Naming convention:
//
//   * tokens are lowercase: for, if, identifier
//   * rules are PascalCase: StructItem, EnumVariant
//   * macro rules are snake_cased: list_item
//   * recovery related rules are PascalCase_with_snake_suffix: Item_recover


File ::= [ SHEBANG_LINE ] InnerAttr* Items


///////////////////////////////////////////////////////////////////////////////////////////////////
// Attributes
///////////////////////////////////////////////////////////////////////////////////////////////////

InnerAttr ::= '#' '!' '[' AttrUpper {
  implements = [ "org.rust.lang.core.psi.ext.RsAttr" ]
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsInnerAttrStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
OuterAttr ::= '#'     '[' AttrUpper {
  implements = [ "org.rust.lang.core.psi.ext.RsAttr" ]
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
private AttrUpper ::= MetaItemWithoutTT ']' |  MetaItemWithTT ']'
private OuterAttr_first ::= '#'

fake MetaItem ::= identifier [ '=' LitExpr | MetaItemArgs ] | CompactTT {
  implements = [ "org.rust.lang.core.psi.ext.RsWeakReferenceElement"
                 "com.intellij.psi.ContributedReferenceHost" ]
  mixin = "org.rust.lang.core.psi.ext.RsMetaItemImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsMetaItemStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

// #[test]
//   ~~~~
// #[derive(Debug)]
//   ~~~~~~~~~~~~~
// #![crate_type = "lib"]
//    ~~~~~~~~~~~~~~~~~~
MetaItemWithoutTT ::= identifier [ '=' LitExpr | MetaItemArgs ] { elementType = MetaItem }

// #[some::path]
//   ~~~~~~~~~~
// #[assert_instr(add_a.b)]
//                ~~~~~~~
// #[attr(value = C)]
//        ~~~~~~~~~~
// #[attr(foo::{bar, baz}, qwe())]
//        ~~~~~~~~~~~~~~~~~~~~~~~
MetaItemWithTT ::= CompactTT { elementType = MetaItem }

MetaItemArgs ::= '(' ( [ <<comma_separated_list (LitExpr | MetaItemWithoutTT )>> ] ')' |  MetaItemWithTT ')' ) {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Paths
///////////////////////////////////////////////////////////////////////////////////////////////////

private PathIdent ::= !("union" identifier) identifier | self | super | 'Self' | crate

fake Path ::= (Path '::' | '::' | TypeQual)? PathIdent PathTypeArguments? {
  implements = [ "org.rust.lang.core.psi.ext.RsPathReferenceElement"
                 "org.rust.lang.core.macros.RsExpandedElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsPathImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsPathStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
private Path_first ::= identifier | self | 'Self' | super | '::' | '<' | crate

private PathImpl ::= PathStart PathSegment*

PathStart ::= ('::' | <<checkTypeQualAllowed>> TypeQual)? PathIdent PathTypeArguments? { elementType = Path }
//    <T as Foo>::bar::baz::<i32>
//    ^~~~~~~~~~~^ TypeQual
TypeQual ::= '<' TypeReference [ as TraitRef] '>' '::' {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

left PathSegment ::= '::' PathIdent PathTypeArguments? { elementType = Path }

private PathTypeArguments ::= <<isPathMode 'COLONS'>> ColonTypeArgumentList
                            | <<isPathMode 'NO_COLONS '>> ( TypeArgumentList | PathParameters RetType? ) // Fn(i32) -> i32 sugar

TypeArgumentList ::= TypeArgumentListImpl {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
ColonTypeArgumentList ::= '::' TypeArgumentListImpl { elementType = TypeArgumentList }

private TypeArgumentListImpl ::= '<' !'=' ( <<list_element Lifetime>>*
                                            <<list_element (!(identifier '=') TypeReference)>>*
                                            <<list_element AssocTypeBinding>>*) '>' { pin = 2 }
AssocTypeBinding ::= identifier '=' TypeReference {
  pin = 2
  implements = [ "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsReferenceElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsAssocTypeBindingMixin"
  stubClass = "org.rust.lang.core.stubs.RsAssocTypeBindingStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}


// Paths for expressions:
//     a::b::<T,U>::c
PathGenericArgsWithoutColons ::= <<typeQuals 'ON' <<pathMode 'NO_COLONS' PathImpl>>>> { elementType = Path }
PathGenericArgsWithoutColonsNoTypeQual ::= <<typeQuals 'OFF' <<pathMode 'NO_COLONS' PathImpl>>>> { elementType = Path }

// Paths without type arguments, for use declarations:
//     a::b::c
PathWithoutTypes ::= <<typeQuals 'OFF' <<pathMode 'NO_TYPES' PathImpl>>>> { elementType = Path }

// Paths for types:
//    a::b<T,U>::c<V,W>
//    a::b<T,U>::c(V) -> W
//    a::b<T,U>::c(V)
PathGenericArgsWithColons ::= <<typeQuals 'ON' <<pathMode 'COLONS' PathImpl>>>> { elementType = Path }
PathGenericArgsWithColonsNoTypeQual ::= <<typeQuals 'OFF' <<pathMode 'COLONS' PathImpl>>>> { elementType = Path }

// Path semantically constrained to resolve to a trait
TraitRef ::= PathGenericArgsWithoutColonsNoTypeQual {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Items
///////////////////////////////////////////////////////////////////////////////////////////////////
Vis ::= crate | pub VisRestriction?
VisRestriction ::= '(' in? PathWithoutTypes ')'

//XXX: don't use contextual keywords in recover, because they remap tokens.
private default_ ::= <<defaultKeyword>>
private union ::= <<unionKeyword>>
private auto ::= <<autoKeyword>>
private dyn ::= <<dynKeyword>>
private async ::= <<asyncKeyword>>
private asyncBlock ::= <<asyncBlockKeyword>>
private try ::= <<tryKeyword>>

private AttrsAndVis ::= OuterAttr* Vis?

private Item ::= Constant
               | TypeAlias
               | Function
               | TraitItem
               | ImplItem
               | ModItem
               | ModDeclItem
               | ForeignModItem
               | StructItem
               | EnumItem
               | UseItem
               | ExternCrateItem
               | Macro
               | Macro2
               | MacroCall

private Item_with_recover ::= !('}' | <<eof>>) Item {
  pin = 1
  recoverWhile = Item_recover
}
private Item_first ::= '#' | pub | crate | fn | const | extern | unsafe | struct | enum | use | identifier | mod | trait
  | static | TYPE_KW | impl | "union" | "default" | "auto" | "dyn" | "async" | MACRO_KW
private Item_recover ::= !('}' | Item_first )

private Items ::= Item_with_recover*

Lifetime ::= QUOTE_IDENTIFIER {
  implements = [ "org.rust.lang.core.psi.ext.RsReferenceElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsLifetimeImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsLifetimeStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////////////////////////////

// Parameters
fake ValueParameter ::= Pat? TypeReference? {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsValueParameterStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

FnParameter ::= [ Pat ':' ] TypeReference
private FnParameter_with_recover ::= FnParameter (',' | &')') {
  pin = 1
  recoverWhile = FnParameter_recover
}
private FnParameter_recover ::= !(Pat_first | ')' | '...')

LambdaParameter ::= Pat TypeAscription?
AnonParameter ::= [ RestrictedPat ':' ] TypeReference
PathParameter ::= TypeReference !'='

SelfParameter ::= [ '&' Lifetime? ] mut? self TypeAscription? {
  implements = [ "org.rust.lang.core.psi.ext.RsNameIdentifierOwner" ]
  mixin = "org.rust.lang.core.psi.ext.RsSelfParameterImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsSelfParameterStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

fake ValueParameterList ::= SelfParameter? ValueParameter* '...'? {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

FnParameters          ::= '(' !',' [ SelfParameter (',' | &')') ]
                                   FnParameter_with_recover* ['...' ','? ]
                          ')' { pin = 1 }
LambdaParameters      ::= '|' !',' [ <<comma_separated_list LambdaParameter>> ] '|'

FnTypeParameters      ::= <<variadic_params_impl AnonParameter>>
PathParameters        ::= '(' [ <<comma_separated_list PathParameter>> ] ')' { pin = 1 }


private meta variadic_params_impl ::= '(' [ <<param>> (',' <<param>>)*  [ ',' '...'? ] ] ')' { pin = 1 }

private RestrictedPat ::= &( [ mut | '&' '&'? ] ( identifier | '_' ) ) Pat

TypeParameterList ::= '<' <<list_element (LifetimeParameter | TypeParameter)>>* '>' {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

private LifetimesParams ::= <<list_element LifetimeParameter>>*

LifetimeParameter ::= OuterAttr* QUOTE_IDENTIFIER LifetimeParamBounds? {
  implements = [ "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsOuterAttributeOwner" ]
  mixin = "org.rust.lang.core.psi.ext.RsLifetimeParameterImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsLifetimeParameterStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

LifetimeParamBounds ::= ':' Lifetime ('+' Lifetime)*

TypeParameter ::= OuterAttr* identifier TypeParamBounds? [ '=' TypeReference ] {
  implements = [ "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsTypeDeclarationElement"
                 "org.rust.lang.core.psi.ext.RsOuterAttributeOwner" ]
  mixin = "org.rust.lang.core.psi.ext.RsTypeParameterImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsTypeParameterStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

TypeParamBounds ::= ':' [ Polybound ('+' Polybound)* '+'? ] {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

Polybound ::= '(' PolyboundInner ')' | PolyboundInner {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPolyboundStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

private PolyboundInner ::= [ ForLifetimes | '?' ] Bound

WhereClause ::= where <<comma_separated_list WherePred>>? {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

WherePred ::= Lifetime LifetimeParamBounds | ForLifetimes? TypeReference TypeParamBounds {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

ForLifetimes ::= for '<' LifetimesParams '>' {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

ExternAbi ::= extern STRING_LITERAL?

RetType ::= '->' TypeReferenceNoImplicitTraitType {
  pin = 1
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

Function ::= OuterAttr*
             default_?
             Vis?
             const? unsafe? ExternAbi?
             async?
             fn identifier
             TypeParameterList?
             FnParameters
             RetType?
             WhereClause?
             (';' | InnerAttrsAndBlock)
{
  pin = 'identifier'
  implements = [ "org.rust.lang.core.psi.ext.RsQualifiedNamedElement"
                 "org.rust.lang.core.psi.ext.RsGenericDeclaration"
                 "org.rust.lang.core.psi.ext.RsInnerAttributeOwner"
                 "org.rust.lang.core.psi.ext.RsItemElement"
                 "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsAbstractable"
                 "org.rust.lang.core.psi.ext.RsUnsafetyOwner"
                 "org.rust.lang.core.psi.ext.RsInferenceContextOwner" ]
  mixin = "org.rust.lang.core.psi.ext.RsFunctionImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsFunctionStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
}

Pat ::= PatWild
      | PatRef
      | PatTup
      | PatSlice
      | PatMacro
      | PatStruct
      | PatTupleStruct
      | PatIdent
      | (PatConst !('..' | '...' | '..='))
      | PatRange
      | PatBox {
  implements = "org.rust.lang.core.macros.RsExpandedElement"
      }

private Pat_first ::= '_' | '&' | '(' | '[' | Path_first | LitExpr  | box | '-' | ref | mut


PatBox ::= box Pat

// XXX(matklad): it is impossible to distinguish between nullary enum variants
// and identifiers during parsing.
//
//   match x {
//       None => { } // match enum variant
//       Name => { } // bind Name to x
//   }
PatIdent ::= PatBinding [ '@' Pat ]

PatStruct ::= PathGenericArgsWithColonsNoTypeQual '{' PatField_with_recover* '..'? '}'
PatTupleStruct   ::= PathGenericArgsWithColonsNoTypeQual '(' SeqPat ')'

// TODO: actual recover
private Pat_with_recover ::= Pat (',' | &(')' | ']' | '..'))
private PatField_with_recover ::= PatField (',' | & '}')

PatConst ::= PathExpr | LitExpr | &('-' LitExpr) UnaryExpr
PatRange ::= PatConst ('..' | '...' | '..=') PatConst { pin = 2 }

PatTup ::= '(' SeqPat ')'
PatSlice ::= '[' SeqPat ']'
// NB: there are `[x, .. , y]` and `[x, z.. , y]`
private SeqPat ::= Pat_with_recover* ['..' [',' Pat_with_recover+] ]

PatRef ::= '&' mut? Pat

PatWild ::= '_'
PatBinding ::= BindingMode? identifier !'...' !'::' {
  implements = [ "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsReferenceElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsPatBindingImplMixin"
}

PatField ::= identifier ':' Pat | box? PatBinding

BindingMode ::= ref mut? | mut

Constant ::= OuterAttr* default_? Vis? (static mut? | const) identifier TypeAscription [ '=' AnyExpr ] ';' {
  pin = 'identifier'
  implements = [ "org.rust.lang.core.psi.ext.RsQualifiedNamedElement"
                 "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsItemElement"
                 "org.rust.lang.core.psi.ext.RsAbstractable"
                 "org.rust.lang.core.psi.ext.RsInferenceContextOwner"
                 "org.rust.lang.core.macros.RsExpandedElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsConstantImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsConstantStub"
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

UseItem ::= AttrsAndVis use UseSpeck ';' {
  pin = "use"
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  implements = [ "org.rust.lang.core.psi.ext.RsItemElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsUseItemImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsUseItemStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

// You can see the following after the `use`:
//  ::{};
//  {foo, bar};
//  foo::bar as baz;
//  foo::bar::{self, foo};
//  foo::{};
//  ::foo::*;
UseSpeck ::= PathWithoutTypes [ Alias | '::' UseSpeckProjection ]
           | '::'? UseSpeckProjection {
  extends = "org.rust.lang.core.psi.ext.RsUseSpeckImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsUseSpeckStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

private UseSpeckProjection ::= '*' | UseGroup
UseGroup ::= '{' UseSpeck_with_recover* '}' {
  pin = 1
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
private UseSpeck_with_recover ::= !'}' UseSpeck (','|&'}') {
  pin = 1
  recoverWhile = UseSpeck_recover
}
private UseSpeck_recover ::= !('}' | '{' | self | identifier | '::' | '*' )

Alias ::= as identifier {
  implements = [ "org.rust.lang.core.psi.ext.RsNameIdentifierOwner" ]
  extends = "org.rust.lang.core.psi.ext.RsStubbedNamedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsAliasStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

ExternCrateItem ::= AttrsAndVis extern crate identifier Alias? ';' {
  pin = "identifier"
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  implements = [ "org.rust.lang.core.psi.ext.RsReferenceElement"
                 "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsItemElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsExternCrateItemImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsExternCrateItemStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

ModItem ::= AttrsAndVis mod identifier '{' InnerAttr* Items '}' {
  pin = 4
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  implements = [ "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsItemElement"
                 "org.rust.lang.core.psi.ext.RsMod"
                 "org.rust.lang.core.psi.ext.RsInnerAttributeOwner" ]
  mixin = "org.rust.lang.core.psi.ext.RsModItemImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsModItemStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

ModDeclItem ::= AttrsAndVis mod identifier ';' {
  pin = 'identifier' // make sure `ModDeclItem` goes **after** `ModItem`
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  implements = [ "org.rust.lang.core.psi.ext.RsReferenceElement"
                 "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsQualifiedNamedElement"
                 "org.rust.lang.core.psi.ext.RsItemElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsModDeclItemImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsModDeclItemStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

ForeignModItem ::= AttrsAndVis ExternAbi '{' InnerAttr* ForeignDecl* '}' {
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  implements = [ "org.rust.lang.core.psi.ext.RsItemElement"
                 "org.rust.lang.core.psi.ext.RsInnerAttributeOwner" ]
  mixin = "org.rust.lang.core.psi.ext.RsForeignModItemImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

private ForeignDecl ::= Constant | Function | TypeAlias


///////////////////////////////////////////////////////////////////////////////////////////////////
// Struct & Enums
///////////////////////////////////////////////////////////////////////////////////////////////////

StructItem ::= AttrsAndVis (struct | union) identifier TypeParameterList?
               ( TupleStructTail | BlockStructTail | UnitStructTail ) {
  pin = 2
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  implements = [ "org.rust.lang.core.psi.ext.RsStructOrEnumItemElement"
                 "org.rust.lang.core.psi.ext.RsFieldsOwner" ]
  mixin = "org.rust.lang.core.psi.ext.RsStructItemImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsStructItemStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

private TupleStructTail ::= TupleFields WhereClause? ';' { pin = 1 }
private UnitStructTail ::= WhereClause? ';'
private BlockStructTail ::= WhereClause? BlockFields

EnumItem ::= AttrsAndVis enum identifier TypeParameterList? WhereClause? EnumBody {
  pin = "enum"
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  implements = "org.rust.lang.core.psi.ext.RsStructOrEnumItemElement"
  mixin = "org.rust.lang.core.psi.ext.RsEnumItemImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsEnumItemStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

EnumBody ::= '{' [ <<comma_separated_list EnumVariant>> ] '}' {
  pin = 1
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

EnumVariant ::= OuterAttr* identifier VariantArgs? {
  pin = 2
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  implements = [ "org.rust.lang.core.psi.ext.RsQualifiedNamedElement"
                 "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsOuterAttributeOwner"
                 "org.rust.lang.core.psi.ext.RsFieldsOwner"
                 "org.rust.lang.core.psi.ext.RsVisible" ]
  mixin = "org.rust.lang.core.psi.ext.RsEnumVariantImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsEnumVariantStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

private VariantArgs ::= BlockFields | TupleFields | VariantDiscriminant

BlockFields ::= '{' (NamedFieldDecl (',' | &'}'))* '}' {
  pin = 1
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

TupleFields ::= '(' (TupleFieldDecl (',' | &')'))* ')' {
  pin = 1
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

VariantDiscriminant ::= '=' AnyExpr {
  pin = 1
  implements = "org.rust.lang.core.psi.ext.RsInferenceContextOwner"
}

NamedFieldDecl ::= AttrsAndVis identifier TypeAscription {
  pin = 2
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  implements = [ "org.rust.lang.core.psi.ext.RsFieldDecl"
                 "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsQualifiedNamedElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsNamedFieldDeclImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsNamedFieldDeclStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
  recoverWhile = Field_recover
}
private Field_recover ::= !('}' | ',')

TupleFieldDecl ::= AttrsAndVis TypeReference {
  implements = [ "org.rust.lang.core.psi.ext.RsFieldDecl" ]
  mixin = "org.rust.lang.core.psi.ext.RsTupleFieldDeclImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  recoverWhile = TupleField_recover
}
private TupleField_recover ::= !(')' | ',')


///////////////////////////////////////////////////////////////////////////////////////////////////
// Trait & Impl
///////////////////////////////////////////////////////////////////////////////////////////////////

TraitItem ::= AttrsAndVis unsafe? auto? trait identifier TypeParameterList? TypeParamBounds? WhereClause? Members {
  pin = "trait"
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  implements = [ "org.rust.lang.core.psi.ext.RsTraitOrImpl"
                 "org.rust.lang.core.psi.ext.RsQualifiedNamedElement"
                 "org.rust.lang.core.psi.ext.RsItemElement"
                 "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsUnsafetyOwner"
                 "org.rust.lang.core.psi.ext.RsTypeDeclarationElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsTraitItemImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsTraitItemStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

ImplItem ::= AttrsAndVis default_? unsafe? impl TypeParameterList? ( TraitImpl | InherentImpl ) WhereClause? Members {
  pin = "impl"
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  implements = [ "org.rust.lang.core.psi.ext.RsTraitOrImpl"
                 "org.rust.lang.core.psi.ext.RsUnsafetyOwner"
                 "org.rust.lang.core.psi.ext.RsInnerAttributeOwner"
                 "org.rust.lang.core.psi.ext.RsTypeDeclarationElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsImplItemImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsImplItemStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
private TraitImpl ::= '!'? TraitRef for ('..' | TypeReference)  { pin = 3 }
private InherentImpl ::= TypeReference !for

Members ::= '{' InnerAttr* Member* '}' {
  pin = 1
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

private Member ::= !'}' ( Function | Constant | TypeAlias | MacroCall ) {
  pin = 1
  recoverWhile = Member_recover
}
private Member_recover ::=  !('#' | Vis | extern | const | static | unsafe | fn | (identifier '!') | TYPE_KW | "default" | '}')

///////////////////////////////////////////////////////////////////////////////////////////////////
// Types
///////////////////////////////////////////////////////////////////////////////////////////////////

private TypeAscription ::= ':' TypeReference

private TypeReferenceInner ::= ArrayType
                               | RefLikeType
                               | FnPointerType
                               | MacroType
                               // External rule to find the difference between `(T)` and `(T,)`
                               | <<tupleOrParenType TypeReferenceInner TupleType_upper>>
                               | ExplicitTraitType
                               | TrivialBaseType
                               // External rule to find the difference between `T` and `T+T`
                               | <<baseOrTraitType PathGenericArgsWithoutColons ImplicitTraitType TraitType_upper>>
                               | ForInType // FIXME O(2^n) for types like `for<'a> A<for<'b> B<for<'c> C<...>>>`

private TypeReferenceNoImplicitTraitTypeInner ::= ArrayType
                               | RefLikeType
                               | FnPointerType
                               | MacroType
                               // External rule to find the difference between `(T)` and `(T,)`
                               | <<tupleOrParenType TypeReferenceInner TupleType_upper>>
                               | ExplicitTraitType
                               | BaseType
                               | ForInType // FIXME O(2^n) for types like `for<'a> A<for<'b> B<for<'c> C<...>>>`

private ScalarTypeReferenceInner ::= ArrayType
                                   | RefLikeType
                                   | FnPointerType
                                   | MacroType
                                   | BaseType
                                   | <<tupleOrParenType ScalarTypeReferenceInner TupleType_upper>>
                                   | ForInType

TypeReference ::= TypeReferenceInner {
  implements = "org.rust.lang.core.macros.RsExpandedElement"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

TypeReferenceNoImplicitTraitType ::= TypeReferenceNoImplicitTraitTypeInner { elementType = TypeReference }
ScalarTypeReference ::= ScalarTypeReferenceInner { elementType = TypeReference }

ArrayType ::= '[' TypeReference [';' AnyExpr] ']' {
  implements = [ "org.rust.lang.core.psi.ext.RsTypeElement" "org.rust.lang.core.psi.ext.RsInferenceContextOwner" ]
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsArrayTypeStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

RefLikeType ::= ( '&' Lifetime? mut? | '*' [ const | mut ] ) TypeReference {
  implements = "org.rust.lang.core.psi.ext.RsTypeElement"
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsRefLikeTypeStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

FnPointerType ::= [ unsafe? ExternAbi? ] fn FnTypeParameters RetType? {
  implements = "org.rust.lang.core.psi.ext.RsTypeElement"
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

MacroType ::= MacroCallNoSemicolons {
  implements = "org.rust.lang.core.psi.ext.RsTypeElement"
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

TupleType ::= '(' [ <<comma_separated_list TypeReference>> ] ')' {
  implements = "org.rust.lang.core.psi.ext.RsTypeElement"
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
private TupleType_upper ::= (',' TypeReference)* ','? ')'

Bound ::= Lifetime | TraitRef {
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

ForInType ::= ForLifetimes (FnPointerType | TraitRef) {
  implements = "org.rust.lang.core.psi.ext.RsTypeElement"
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

BaseType ::= TrivialBaseTypeInner | PathGenericArgsWithoutColons {
  implements = "org.rust.lang.core.psi.ext.RsTypeElement"
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsBaseTypeStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

TrivialBaseType ::= TrivialBaseTypeInner { elementType = BaseType }
private TrivialBaseTypeInner ::= '(' ')' | '_' | '!'

// `impl Trait` or `dyn Trait` or `Trait+'a`
fake TraitType ::= ExplicitTraitTypeInner | ImplicitTraitTypeInner {
  implements = "org.rust.lang.core.psi.ext.RsTypeElement"
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsTraitTypeStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

ExplicitTraitType ::= ExplicitTraitTypeInner { elementType = TraitType }
private ExplicitTraitTypeInner ::= (impl | dyn) Polybound ('+' Polybound)*

ImplicitTraitType ::= ImplicitTraitTypeInner { elementType = TraitType }
private ImplicitTraitTypeInner ::= Polybound ('+' Polybound)+

private TraitType_upper ::= ('+' Polybound)+

TypeAlias ::= OuterAttr* default_? Vis? TYPE_KW identifier
              [ TypeParameterList WhereClause? | WhereClause | TypeParamBounds ]
              [ '=' TypeReference ] ';' {
  pin = 'identifier'
  implements = [ "org.rust.lang.core.psi.ext.RsQualifiedNamedElement"
                 "org.rust.lang.core.psi.ext.RsItemElement"
                 "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsGenericDeclaration"
                 "org.rust.lang.core.psi.ext.RsAbstractable"
                 "org.rust.lang.core.psi.ext.RsTypeDeclarationElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsTypeAliasImplMixin"
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  stubClass = "org.rust.lang.core.stubs.RsTypeAliasStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Expressions
///////////////////////////////////////////////////////////////////////////////////////////////////

// https://doc.rust-lang.org/reference.html#operator-precedence
// https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md#24-compact-expression-parsing-with-priorities
//
// Rust expression grammar allows or forbids struct literals depending on context.
// There are `no_struct_lit_expr` and `any_expr` productions for this two cases.
// `expr` production is an implementation detail. It passes the context information to the child expressions.
Expr ::= RetExpr
       | YieldExpr
       | LambdaExpr
       | AssignBinExpr

       | WhileExpr
       | IfExpr
       | ForExpr
       | LoopExpr
       | MatchExpr
       | BlockExpr

       | ContExpr
       | BreakExpr
       | FullRangeExpr
       | OpenRangeExpr
       | BoolOrBinExpr
       | BoolAndBinExpr
       | CompBinExpr
       | RelCompBinExpr
       | BitOrBinExpr
       | BitXorBinExpr
       | BitAndBinExpr
       | BitShiftBinExpr
       | AddBinExpr
       | MulBinExpr
       | CastExpr
       | UnaryExpr
       | TryExpr
       | AtomExpr {
  implements = "org.rust.lang.core.macros.RsExpandedElement"
  mixin = "org.rust.lang.core.psi.ext.RsExprMixin"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
}

private Expr_first ::= return | '|' | Path_first | '{' | '[' | '(' | '..' | '...' | '..=' | true | false | box | QUOTE_IDENTIFIER
  | '-' | '*' | '!' | '&' | move | LitExpr | while | if | for | continue | break  | loop | match | unsafe | yield | "async" | "try"

// https://github.com/rust-lang/rfcs/blob/master/text/0092-struct-grammar.md
NoStructLitExpr ::= <<structLiterals 'OFF' <<stmtMode 'OFF' Expr>> >> { elementType = Expr }
AnyExpr ::= <<structLiterals 'ON' <<stmtMode 'OFF' Expr>> >> { elementType = Expr }
StmtModeExpr ::= <<structLiterals 'ON' <<stmtMode 'ON' Expr>> >> { elementType = Expr }
StmtModeExprOff ::= <<stmtMode 'OFF' Expr>> { elementType = Expr }

BlockExpr ::= OuterAttr* [ (unsafe | asyncBlock move? | try) &'{' ] SimpleBlock {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}


private AtomExpr ::= LitExpr
                    | MacroExpr
                    | StructLiteral
                    | DotExpr
                    | IndexExpr
                    | PathExpr !'('
                    | CallExpr
                    | ArrayExpr
                    | UnitExpr
                    | TupleOrParenExpr

fake BinaryExpr ::= Expr BinaryOp Expr {
  methods=[
    left="/Expr[0]"
    right="/Expr[1]"
  ]
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

fake BinaryOp ::= gtgteq | ltlteq | '|=' | '^=' | '&=' | '=' | '+=' | '-=' | '*=' | '/=' | '%='
                | '==' | '!='
                | '<' | '>' | lteq | gteq
                | ltlt | gtgt
                | '+' | '-' | '*' | '/' | '%'
                | oror | andand | '|' | '&' | '^' {
  implements = [ "org.rust.lang.core.psi.ext.RsReferenceElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsBinaryOpImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsBinaryOpStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

AssignBinExpr ::= Expr AssignBinOp Expr    { rightAssociative = true }
AssignBinOp ::= gtgteq | ltlteq | '|=' | '^=' | '&=' | '=' | '+=' | '-=' | '*=' | '/=' | '%='

CompBinExpr      ::= Expr !<<isCompleteBlockExpr>> CompBinOp StmtModeExprOff
RelCompBinExpr   ::= Expr !<<isCompleteBlockExpr>> RelCompBinOp StmtModeExprOff
BitShiftBinExpr  ::= Expr !<<isCompleteBlockExpr>> BitShiftBinOp StmtModeExprOff
AddBinExpr       ::= Expr !<<isCompleteBlockExpr>> AddBinOp StmtModeExprOff
MulBinExpr       ::= Expr !<<isCompleteBlockExpr>> MulBinOp StmtModeExprOff

CompBinOp        ::= '==' | '!='
RelCompBinOp     ::= (!('<<' | '<=') '<' | !('>>' | '>=')  '>' | lteq | gteq)
BitShiftBinOp    ::= ltlt | gtgt
AddBinOp         ::= '+' | '-'
MulBinOp         ::= '*' | '/' | '%'

// <expr> | <expr> has higher priority than <expr> || <expr>
BoolOrBinExpr    ::= Expr !<<isCompleteBlockExpr>> BoolOrBinOp StmtModeExprOff
BoolAndBinExpr   ::= Expr !<<isCompleteBlockExpr>> BoolAndBinOp StmtModeExprOff
BitOrBinExpr     ::= Expr !(<<isCompleteBlockExpr>> | oror) BitOrBinOp StmtModeExprOff
BitAndBinExpr    ::= Expr !(<<isCompleteBlockExpr>> | andand) BitAndBinOp StmtModeExprOff
BitXorBinExpr    ::= Expr !<<isCompleteBlockExpr>> BitXorBinOp StmtModeExprOff

BoolOrBinOp      ::= oror
BoolAndBinOp     ::= andand
BitOrBinOp       ::= '|'
BitAndBinOp      ::= '&'
BitXorBinOp      ::= '^'

CastExpr ::= Expr (as | ':')  ScalarTypeReference {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

TryExpr ::= Expr '?' {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

UnaryExpr ::= OuterAttr* (box | '-' | '*' | '!' | '&' mut?) Expr {
 elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

LambdaExpr ::= OuterAttr* asyncBlock? move? LambdaParameters RetType? AnyExpr {
 elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

StructLiteral ::= <<checkStructAllowed>> OuterAttr* PathGenericArgsWithColonsNoTypeQual StructLiteralBody {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

StructLiteralBody ::= '{' StructLiteralField_with_recover* ('..'  AnyExpr)? '}' { pin = 1 }

StructLiteralField ::= OuterAttr* (identifier | INTEGER_LITERAL) [ ':' AnyExpr ] {
  pin = 2
  implements = [ "org.rust.lang.core.psi.ext.RsReferenceElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsStructLiteralFieldImplMixin"
}

private StructLiteralField_with_recover ::= StructLiteralField (',' | &'}') {
  pin = 1
  recoverWhile = StructLiteralField_recover
}

private StructLiteralField_recover ::= !(identifier | INTEGER_LITERAL | ',' | '}' | '..' | '#')

PathExpr ::= OuterAttr* PathGenericArgsWithColons {
 elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

WhileExpr ::= OuterAttr* LabelDecl? while Condition SimpleBlock {
  pin = 'while'
  implements = [ "org.rust.lang.core.psi.ext.RsLabeledExpression" ]
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
Condition ::= [ let Pat '=' ] NoStructLitExpr

LoopExpr ::= OuterAttr* LabelDecl? loop SimpleBlock {
  pin = 'loop'
  implements = [ "org.rust.lang.core.psi.ext.RsLabeledExpression" ]
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

ContExpr ::= OuterAttr* continue Label? {
 elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

BreakExpr ::= OuterAttr* break Label? AnyExpr? {
 elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

ForExpr ::= OuterAttr* LabelDecl? for Pat in NoStructLitExpr SimpleBlock {
  pin = 'for'
  implements = [ "org.rust.lang.core.psi.ext.RsLabeledExpression" ]
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

LabelDecl ::= QUOTE_IDENTIFIER ':' {
  implements = [ "org.rust.lang.core.psi.ext.RsNameIdentifierOwner" ]
  mixin = "org.rust.lang.core.psi.ext.RsLabelDeclImplMixin"
}
Label ::= QUOTE_IDENTIFIER {
  implements = [ "org.rust.lang.core.psi.ext.RsReferenceElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsLabelImplMixin"
}

MatchExpr ::= OuterAttr* match NoStructLitExpr MatchBody {
  pin = 'match'
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
MatchBody ::= '{' MatchArm* '}' { pin = 1 }
MatchArm ::= OuterAttr* '|'? Pat ('|' Pat)* MatchArmGuard? '=>' StmtModeExpr (',' | (&'}' | <<isBlock>>)) {
  pin = 3
  recoverWhile = MatchArm_recover
}
private MatchArm_recover ::= !(Pat_first | OuterAttr_first | '}' | '|')
MatchArmGuard ::= if AnyExpr

IfExpr ::= OuterAttr* if Condition SimpleBlock ElseBranch? {
  pin = 'if'
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
ElseBranch ::= else ( IfExpr | SimpleBlock )

RetExpr ::= OuterAttr* return Expr? {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

UnitExpr ::= OuterAttr* '(' ')' {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

fake TupleExpr ::= '(' AnyExpr+ ')' {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
fake ParenExpr ::= '(' AnyExpr ')' {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

// XXX: without the `pin`, upper rules won't work, GK can change element type
// of the frame only if it already has some type
// https://github.com/JetBrains/Grammar-Kit/blob/d716ade658c1f8e1f84bd0d61764c9949a7df5f2/src/org/intellij/grammar/parser/GeneratedParserUtilBase.java#L656
TupleOrParenExpr ::= OuterAttr* '(' AnyExpr (TupleExprUpper | ParenExprUpper) {
  pin = 2
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
upper TupleExprUpper ::= ',' [ AnyExpr (',' AnyExpr)* ','? ] ')' { elementType = TupleExpr }
upper ParenExprUpper ::= ')' { elementType = ParenExpr }

ArrayExpr ::= OuterAttr* '[' ArrayInitializer ']' {
  pin = 2
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
private ArrayInitializer ::= [ AnyExpr ( ';' AnyExpr | (',' AnyExpr)* ','? ) ]

fake RangeExpr ::= Expr? ('..' | '...' | '..=') Expr? {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

FullRangeExpr ::= Expr ( '..' (<<checkBraceAllowed>> Expr)? | '...' (<<checkBraceAllowed>> Expr) | '..=' (<<checkBraceAllowed>> Expr) ) { elementType = RangeExpr }
OpenRangeExpr ::=      ( '..' (<<checkBraceAllowed>> Expr)? | '...' (<<checkBraceAllowed>> Expr) | '..=' (<<checkBraceAllowed>> Expr) ) { elementType = RangeExpr }

IndexExpr ::= Expr IndexArg {
 elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
// Do not inline this rule, it breaks expression parsing
private IndexArg ::= '[' Expr ']'

CallExpr ::= Expr !<<isCompleteBlockExpr>> ValueArgumentList {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
ValueArgumentList ::= '(' <<comma_separated_list AnyExpr>>? ')' { pin = 1 }

DotExpr ::= Expr '.'  MethodOrField {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

private MethodOrField ::= () (MethodCall | FieldLookup) { pin = 1}

FieldLookup ::= identifier | INTEGER_LITERAL {
  implements = [ "org.rust.lang.core.psi.ext.RsReferenceElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsFieldLookupImplMixin"
}

MethodCall ::= identifier ColonTypeArgumentList? ValueArgumentList {
  implements = [ "org.rust.lang.core.psi.ext.RsReferenceElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsMethodCallImplMixin"
}

LitExpr ::= OuterAttr*
  (STRING_LITERAL | BYTE_STRING_LITERAL
  | RAW_STRING_LITERAL | RAW_BYTE_STRING_LITERAL
  | CHAR_LITERAL | BYTE_LITERAL
  | INTEGER_LITERAL | FLOAT_LITERAL
  | BOOL_LITERAL) {
 elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
 implements = "com.intellij.psi.PsiLanguageInjectionHost"
 mixin = "org.rust.lang.core.psi.ext.RsLitExprMixin"
}

YieldExpr ::= OuterAttr* yield Expr? {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Macros
///////////////////////////////////////////////////////////////////////////////////////////////////


Macro ::= AttrsAndVis "macro_rules" '!' identifier MacroBody <<macroSemicolon>>{
  implements = [ "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsOuterAttributeOwner"
                 "org.rust.lang.core.psi.ext.RsQualifiedNamedElement"
                 "org.rust.lang.core.macros.RsExpandedElement"
                 "org.rust.lang.core.psi.ext.RsModificationTrackerOwner" ]
  extends = "org.rust.lang.core.psi.ext.RsMacroImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsMacroStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  pin = 2
}

MacroBody ::= <<any_braces (MacroCase ';'?)*>>

MacroCase ::= MacroPattern '=>' MacroExpansion { pin = 1 }

MacroPattern ::= <<any_braces MacroPatternContents >>
MacroPatternContents ::=
  (MacroPattern | MacroBinding | MacroBindingGroup | <<unpairedToken>>)*

MacroBinding ::= '$' MetaVarIdentifier ':' identifier {
  pin = 2
  implements = [ "org.rust.lang.core.psi.ext.RsNameIdentifierOwner" ]
  mixin = "org.rust.lang.core.psi.ext.RsMacroBindingImplMixin"
}
MetaVarIdentifier ::= <<macroIdentifier>>
MacroBindingGroup ::= '$' '(' MacroPatternContents ')' MacroBindingGroupSeparator? ('*' | '+' | '?') { pin = 2 }
MacroBindingGroupSeparator ::= <<macroBindingGroupSeparatorToken>>

MacroExpansion ::= <<any_braces MacroExpansionContents>>

MacroExpansionContents ::=
  (MacroExpansion | MacroReference | MacroExpansionReferenceGroup | <<unpairedToken>>)*

MacroReference ::= '$' MetaVarIdentifier {
  implements = [ "org.rust.lang.core.psi.ext.RsReferenceElement" ]
  mixin = "org.rust.lang.core.psi.ext.RsMacroReferenceImplMixin"
}
MacroExpansionReferenceGroup ::= '$' '(' MacroExpansionContents ')' MacroExpansionGroupSeparator? ('*' | '+' | '?') { pin = 2 }
MacroExpansionGroupSeparator ::= <<macroBindingGroupSeparatorToken>>

Macro2 ::= AttrsAndVis MACRO_KW identifier ( Macro2FunctionLikeBody | Macro2MatchLikeBody ) {
  implements = [ "org.rust.lang.core.psi.ext.RsNameIdentifierOwner"
                 "org.rust.lang.core.psi.ext.RsItemElement"
                 "org.rust.lang.core.psi.ext.RsQualifiedNamedElement" ]
  extends = "org.rust.lang.core.psi.ext.RsMacro2ImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsMacro2Stub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  pin = 2
}

private Macro2FunctionLikeBody ::= '(' MacroPatternContents ')' '{' MacroExpansionContents '}'
private Macro2MatchLikeBody ::= '{' MacroCase ';'? '}'

MacroCall ::= MacroHead <<macroSemicolon>> {
  implements = [ "org.rust.lang.core.psi.ext.RsOuterAttributeOwner"
                 "org.rust.lang.core.macros.RsExpandedElement"
                 "org.rust.lang.core.psi.ext.RsModificationTrackerOwner" ]
  pin = 2
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
  mixin = "org.rust.lang.core.psi.ext.RsMacroCallImplMixin"
  stubClass = "org.rust.lang.core.stubs.RsMacroCallStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

MacroCallNoSemicolons ::= MacroHead {
  pin = 2
  elementType = MacroCall
  hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
}

private MacroHead ::= AttrsAndVis &(PathWithoutTypes '!') (SpecialMacro | CommonMacro)

MacroArgument ::= <<any_braces CompactTT>>
// `CompactTT` differs from `TT` in that it does not create an additional `TT` nodes for each unpaired token
CompactTT ::= (<<any_braces CompactTT>> | <<unpairedToken>>)*

// Used only manually in (external) macro matching code
//noinspection BnfUnusedRule
TT ::= <<any_braces TT*>> | <<unpairedToken>>

private CommonMacro ::= PathWithoutTypes '!' identifier? MacroArgument { pin = 2 }
private SpecialMacro ::= ExprMacro | FormatLikeMacro | AssertMacro | VecMacro | LogMacro | IncludeMacro

private ExprMacro ::= &(("try" | "await" | "dbg") '!') PathWithoutTypes '!' ExprMacroArgument { pin = 3 }
// Expression node is optional to avoid parsing error when expr is not typed yet (like `dbg!()`)
ExprMacroArgument ::= <<any_braces AnyExpr?>>

// https://doc.rust-lang.org/std/fmt/
private FormatLikeMacro ::=
  &(("format" | "format_args" | "write" | "writeln" | "print" | "println" | "eprint" | "eprintln" | "panic" | "unimplemented" | "unreachable") '!')
  PathWithoutTypes '!' FormatMacroArgument { pin = 3 }

FormatMacroArgument ::= <<any_braces [ <<comma_separated_list FormatMacroArg>> ] >>
FormatMacroArg ::= [ identifier '=' ] AnyExpr


private AssertMacro ::=
  &(("assert" | "debug_assert" | "assert_eq" | "assert_ne" | "debug_assert_eq" | "debug_assert_ne") '!')
  PathWithoutTypes '!' AssertMacroArgument { pin = 3 }

AssertMacroArgument ::= <<any_braces (AnyExpr [ ',' <<comma_separated_list FormatMacroArg>> ])>>


private VecMacro ::= &("vec" '!') PathWithoutTypes '!' VecMacroArgument { pin = 3 }
VecMacroArgument ::= <<any_braces ArrayInitializer >>


private LogMacro ::=
  &(( "trace" | "log" | "warn" | "debug" | "error" | "info" ) '!')
  PathWithoutTypes '!' LogMacroArgument

LogMacroArgument ::=
  <<any_braces (('target' ':' Expr ','?)? (<<comma_separated_list FormatMacroArg>>)?)>>

private IncludeMacro ::= &(("include" | "include_str" | "include_bytes") '!') PathWithoutTypes '!' IncludeMacroArgument

IncludeMacroArgument ::= <<any_braces (AnyExpr ','?)>>

private meta any_braces ::=
  '(' <<param>> ')'
| '{' <<param>> '}'
| '[' <<param>> ']'
{ pin = 1 }

// Macro wrappers
MacroExpr ::= MacroCallNoSemicolons {
 elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}
PatMacro ::= MacroCallNoSemicolons

///////////////////////////////////////////////////////////////////////////////////////////////////
// Statements
///////////////////////////////////////////////////////////////////////////////////////////////////

fake Block ::= '{' InnerAttr* (Item | Stmt)* Expr? '}' {
  pin = 1
  implements = "org.rust.lang.core.psi.ext.RsItemsOwner"
  extends = "org.rust.lang.core.psi.ext.RsStubbedElementImpl<?>"
  stubClass = "org.rust.lang.core.stubs.RsPlaceholderStub"
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

SimpleBlock ::= '{' BlockElement* '}' {
  pin = 1
  elementType = Block
}

InnerAttrsAndBlock ::= '{' InnerAttr* BlockElement* '}' {
  pin = 1
  elementType = Block
}
private BlockElement ::= !'}' (Macro | ExprStmtOrLastExpr | Stmt | Item) {
  pin = 1
  recoverWhile = BlockElement_recover
}
private BlockElement_recover ::= !('}' | Item_first | Expr_first | let | ';')

Stmt ::= LetDecl | EmptyStmt | never ';'

ExprStmtOrLastExpr ::= StmtModeExpr (ExprStmtUpper | LastExprUpper) {
  elementTypeFactory = "org.rust.lang.core.stubs.StubImplementationsKt.factory"
}

upper ExprStmtUpper ::= ';' | () <<isBlock>> !('}') { elementType = ExprStmt }
upper LastExprUpper ::= () &'}' { elementType = Expr pin = 1 }

fake ExprStmt ::= AnyExpr ';'? { extends = Stmt }

LetDecl ::= OuterAttr* let Pat TypeAscription? [ '=' AnyExpr ] ';' {
  extends = Stmt
  pin = "let"
}

EmptyStmt ::= ';' { extends = Stmt }


///////////////////////////////////////////////////////////////////////////////////////////////////
// Utils
///////////////////////////////////////////////////////////////////////////////////////////////////

// Keep in sync with `collapsedTokenType`
private gtgteq ::= <<gtgteqImpl>>  | never GTGTEQ { name = ">>=" }
private gtgt   ::= <<gtgtImpl>>    | never GTGT   { name = ">>" }
private gteq   ::= <<gteqImpl>>    | never GTEQ   { name = ">=" }
private ltlteq ::= <<ltlteqImpl>>  | never LTLTEQ { name = "<<=" }
private ltlt   ::= <<ltltImpl>>    | never LTLT   { name = "<<" }
private lteq   ::= <<lteqImpl>>    | never LTEQ   { name = "<=" }
private oror   ::= <<ororImpl>>    | never OROR   { name = "||" }
private andand ::= <<andandImpl>>  | never ANDAND { name = "&&" }

private never ::= !()

// Trailing commas are allowed
private meta comma_separated_list ::= <<param>> ( ',' <<param>> )* ','?
private meta list_element ::= <<param>> !'+' (',' | &'>') { pin = 2 }

FILE
  RsFunctionImpl(FUNCTION)
    PsiElement(fn)('fn')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('foo')
    RsValueParameterListImpl(VALUE_PARAMETER_LIST)
      PsiElement(()('(')
      PsiElement())(')')
    PsiWhiteSpace(' ')
    RsBlockImpl(BLOCK)
      PsiElement({)('{')
      PsiWhiteSpace('\n    ')
      RsLitExprImpl(LIT_EXPR)
        PsiElement(INTEGER_LITERAL)('2')
        PsiErrorElement:'(', ';', <operator>, '[' or '}' expected, got 'let'
          <empty list>
      PsiWhiteSpace('\n    ')
      RsLetDeclImpl(LET_DECL)
        PsiElement(let)('let')
        PsiErrorElement:<pattern> expected, got ';'
          <empty list>
        PsiWhiteSpace(' ')
        PsiElement(;)(';')
      PsiWhiteSpace('\n\n    ')
      PsiComment(<EOL_COMMENT>)('// Distinguish `for` expr from `for<>` in types')
      PsiWhiteSpace('\n    ')
      RsLetDeclImpl(LET_DECL)
        PsiElement(let)('let')
        PsiWhiteSpace(' ')
        RsPatWildImpl(PAT_WILD)
          PsiElement(_)('_')
        PsiElement(:)(':')
        PsiErrorElement:'(', <bound>, <fn pointer type>, <macro call>, <path start>, <ref like type>, <trivial base type>, '?', '[', for or impl expected, got 'for'
          <empty list>
      PsiWhiteSpace('\n    ')
      RsForExprImpl(FOR_EXPR)
        PsiElement(for)('for')
        PsiWhiteSpace(' ')
        RsPatIdentImpl(PAT_IDENT)
          RsPatBindingImpl(PAT_BINDING)
            PsiElement(identifier)('a')
        PsiWhiteSpace(' ')
        PsiElement(in)('in')
        PsiWhiteSpace(' ')
        RsPathExprImpl(PATH_EXPR)
          RsPathImpl(PATH)
            PsiElement(identifier)('b')
        PsiWhiteSpace(' ')
        RsBlockImpl(BLOCK)
          PsiElement({)('{')
          PsiElement(})('}')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
